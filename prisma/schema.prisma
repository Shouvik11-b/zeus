datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ***
// Models for next-auth
// ***

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ***
// Models native to the app
// User holds some values for next-auth (accounts, sessions, id)
// ***

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  polls    Poll[]
  votes    PollVote[]
  accounts Account[]
  sessions Session[]
}

model Poll {
  id          String   @id @unique
  title       String
  description String?  @db.Text
  password    String?
  timeLimit   Int      @default(3600) // Value in seconds
  createdAt   DateTime @default(now())
  isArchived  Boolean  @default(false)
  userId      String?

  user    User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  options PollOption[]
  votes   PollVote[]
}

model PollOption {
  id     String @id @unique
  label  String
  pollId String

  poll  Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes PollVote[]
}

model PollVote {
  id       String  @id @unique
  optionId String
  pollId   String
  userId   String?

  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user   User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
